# -*- coding: utf-8 -*-
"""Cleaning of SiAndalan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fe4BSlQLZHLXILPOZ6GXHXVpOVSxQkhl
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("south_sulawesi_flood_data (1).csv")

df.info()

#Menghapus kolom tidak relevan
drop_initial = ['jenis', 'DT_RowIndex', 'deleted_at', 'deleted_by', 'created_at', 'created_by']
df.drop(columns=drop_initial, inplace=True, errors='ignore')

"""*   Dilakukan pembuangan awal kolom yang dianggap tidak memberikan nilai analisis atau sudah dipastikan kosong seluruhnya (100% missing value).
*   Kolom seperti deleted_at dan deleted_by adalah bagian dari sistem atau metadata yang tidak dibutuhkan untuk analisis prediktif.
*   DT_RowIndex dan jenis kemungkinan berasal dari proses input atau frontend dan tidak informatif secara statistik.
*   Penggunaan errors='ignore' mencegah error jika ada kolom yang ternyata tidak ditemukan, sehingga kode tetap berjalan.



"""

# Cek persentase missing value
missing_percent = df.isnull().sum() / len(df) * 100

# Tampilkan kolom dengan missing <5 %
high_missing = missing_percent[missing_percent < 5]
print("Kolom dengan missing value ,<5%:\n", high_missing)

"""*   Langkah ini dilakukan untuk menghitung presentase missing value per kolom
*   Hanya kolom - kolom dengan missing value kurang dari 5% yang difilter, karena masih bisa dipertahankan dan diperbaiki nilainya tanpa membuang banyak informasi
*   Missing value dibawah 5% terdapat pada kolom kerugian, kec, kel, rb, rr, kebun dan jiwa.
*   Hasil dari langkah ini dijadikan dasar untuk pengisian nilai pada tahap selanjutnya. Namun, perlu dilakukan cek distribusi data untuk menentukan pengisian nilai menggunakan metode apa (median, mean, dan modus)




"""

#Cek Distribusi fitur dengan missing value < 5%
cols_to_check = ['kec', 'kel', 'jiwa', 'rb', 'rr', 'kebun', 'kerugian']

# Cek distribusi fitur numerik (exclude object/text)
numeric_cols = df[cols_to_check].select_dtypes(include=['float64', 'int64']).columns

# Plot distribusi
for col in numeric_cols:
    plt.figure(figsize=(6, 4))
    sns.histplot(df[col], kde=True, bins=30)
    plt.title(f'Distribusi Kolom: {col}')
    plt.xlabel(col)
    plt.ylabel('Frekuensi')
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# Median untuk distribusi skewed
median_cols = ['jiwa', 'rb', 'rr', 'kebun', 'kerugian']
for col in median_cols:
    df[col] = df[col].fillna(df[col].median())

# Mode untuk kolom kategorikal
mode_cols = ['kec', 'kel']
for col in mode_cols:
    df[col] = df[col].fillna(df[col].mode()[0])

"""*   Nilai kosong (NaN) pada kolom ini berdasarkan nilai median karena distribusi data cenderung skewed (tidak normal), terlihat dari histogram yang sebelumnya divisualisasikan.
*   Kenapa Median? karena median lebih robust terhadap outlier, cocok untuk data distribusi miring
*   Pengisian nilai median dilakukan pada kolom jiwa, rb, rr, kebun dan kerugian.
*   Kolom kec dan kel adalah data kategorikal yang bersifat nominal (tidak berurutan).
*   Pengisian nilai pada kolom kec dan kel dilakukan menggunakan nilai modus, yaitu nilai yang paling sering muncul pada kolom tersebut.
*   Modus cocok untuk data kategorikal karena bisa dihitung rata-ratanya.
*   Mengisi dengan nilai yang paling umum cenderung tidak mengganggu pola distribusi keseluruhan data




"""

#Menampilkan semua baris
pd.set_option('display.max_rows', None)
# Cek persentase missing value
missing_percent = df.isnull().sum() / len(df) * 100

# Tampilkan kolom dengan missing > 5%
high_missing = missing_percent[missing_percent > 5]
print("Kolom dengan missing value > 5%:\n", high_missing)

"""*   Tujuan langkah ini adalah mengidentifikasi fitur mana aja yang memiliki tingkat missing value cukup tinggi, sehingga diperlukan penanganan khusus
*   Umumnya, jika missing value >50% dipertimbangkan untuk dihapus
*   Jika di antara 5-50% perlu dipertimbangkan apakah fitur penting dan bisa diisi secara logis.

"""

# Menghapus kolom nilai missing value >95%
drop_cols = [
    'deleted_at', 'deleted_by', 'pabrik', 'keterangan', 'ket_penanganan',
    'anak_anak', 'perempuan', 'laki_laki', 'lansia'
]
df.drop(columns=drop_cols, inplace=True, errors='ignore')

"""*   Kolom - kolom tersebut tidak memiliki informasi (semuanya kosong) sehingga tidak berguna dalam analisis atau prediksi
*   Tetap menyimpan kolom seperti ini hanya menambah noise dan beban memori


"""

median_cols = [
    'terdampak', 'tertimbun', 'tmdm_fu', 'tertimbun_fu',
    'tertimbun_pendidikan', 'terendam_pendidikan', 'rr_pendidikan', 'rs_pendidikan', 'rb_pendidikan',
    'tertimbun_kesehatan', 'terendam_kesehatan', 'rr_kesehatan', 'rs_kesehatan', 'rb_kesehatan',
    'tertimbun_kantor', 'terendam_kantor', 'rr_kantor', 'rs_kantor', 'rb_kantor',
    'tertimbun_ibadah', 'terendam_ibadah', 'rr_ibadah', 'rs_ibadah', 'rb_ibadah',
    'rr_fu', 'rs_fu', 'rb_fu',
    'tertimbun_jembatan', 'terendam_jembatan', 'rr_jembatan', 'rs_jembatan', 'rb_jembatan',
    'tertimbun_pabrik', 'terendam_pabrik', 'rr_pabrik', 'rs_pabrik', 'rb_pabrik',
    'tertimbun_toko', 'terendam_toko', 'rr_toko', 'rs_toko', 'rb_toko',
    'lahan', 'irigasi', 'tertimbun_tanggul', 'terendam_tanggul',
    'rr_tanggul', 'rs_tanggul', 'rb_tanggul',
    'meninggal_laki', 'meninggal_perempuan', 'hilang_laki', 'hilang_perempuan',
    'luka_laki', 'luka_perempuan', 'mengungsi_laki', 'mengungsi_perempuan'
]
for col in median_cols:
    if col in df.columns:
        df[col] = df[col].fillna(df[col].median())

mode_cols = ['penyebab', 'kronologi', 'status', 'kategori_laki', 'kategori_perempuan']
for col in mode_cols:
    if col in df.columns:
        df[col] = df[col].fillna(df[col].mode()[0])

"""*   Fitur numerik diisi dengan median karena distribusi cenderung skewed.
*   Fitur kategorikal atau teks seperti penyebab dan kronologi, isi dengan string default agar tidak hilang tetapi tetap mencerminkan bahwa datanya tidak lengkap.


"""

# Hapus metadata teknis
df.drop(columns=['updated_at', 'updated_by'], inplace=True, errors='ignore')

# Imputasi kolom fasilitas terdampak
fasilitas_cols = ['sklh', 'ibdh', 'sarkes', 'ktr', 'kios', 'jmbtn']
for col in fasilitas_cols:
    if col in df.columns:
        df[col] = df[col].fillna(df[col].median())

"""*   Kolom metadata teknis perlu dihapus karena kolom ini tidak diperlukan untuk analisis danhanya menyimpan informasi log system


"""

df.info()

df.head(10)

# Simpan Dataset
df.to_csv("Clean Data of Si Andalan.csv", index=False)

print("Cleaning selesai. Dataset siap digunakan.")